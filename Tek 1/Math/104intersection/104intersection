#!/bin/python3
##
## EPITECH PROJECT, 2021
## B-MAT-100-MPL-1-1-104intersection-loic.tisseyre
## File description:
## 104intersection.py
##

import math, sys

if (len(sys.argv) == 1):
    sys.exit(84)

if len(sys.argv) == 9 and sys.argv[1] != "-h":
    for i in range(len(sys.argv) - 1):
        try:
            int(sys.argv[i + 1])
        except ValueError:
            sys.exit((84))
    dx = float(sys.argv[2])
    dy = float(sys.argv[3])
    dz = float(sys.argv[4])
    px = float(sys.argv[5])
    py = float(sys.argv[6])
    pz = float(sys.argv[7])
    rad = float(sys.argv[8])
elif sys.argv[1] == "-h":
    print("""USAGE
    ./104intersection opt xp yp zp xv yv zv p

DESCRIPTION
    opt             surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone
    (xp, yp, zp)    coordinates of a point by which the light ray passes through
    (xv, yv, zv)    coordinates of a vector parallel to the light ray
    p               parameter: radius of the sphere, radius of the cylinder, or
                    agl formed by the cone and the Z-axis""")
    sys.exit(0)
else:
    sys.exit(84)

def delta(a, b, c):
    d = pow(b, 2) - 4 * a * c
    if d == 0:
        print("1 intersection points:")
        x1 = -(b / 2 * a)
        print("(%.3f, " %(dx + x1 * px),"%.3f, " %(dy + x1 * py), "%.3f" %(dz + x1 * pz), ")", sep="");
    if d < 0:
        print("No intersection point.")
        x1 = 0
    elif d > 0:
        print("2 intersection points:")
        x1 = (((-b) + math.sqrt(d))) / (2 * a)
        x2 = (((-b) - math.sqrt(d))) / (2 * a)
        print("(%.3f, " %(dx + x1 * px),"%.3f, " %(dy + x1 * py), "%.3f" %(dz + x1 * pz), ")", sep="");
        print("(%.3f, " %(dx + x2 * px),"%.3f, " %(dy + x2 * py), "%.3f" %(dz + x2 * pz), ")", sep="");

def sphere():
    a = pow(px, 2) + pow(py, 2) + pow(pz, 2)
    b = (2 * dx * px) + (2 * dy * py) + (2 * dz * pz)
    c = pow(dx, 2) + pow(dy, 2) + pow(dz, 2) - pow(rad, 2)
    delta(a, b, c)

def cylindre():
    a = pow(px, 2) + pow(py, 2)
    b = (2 * dx * px) + (2 * dy * py)
    c = pow(dx, 2) + pow(dy, 2) - pow(rad, 2)
    delta(a, b, c)

def cone():
    pi = 3.14159265359
    agl = (rad * pi) / 180;
    a = (pow(px, 2) + pow(py, 2) - (pow(pz, 2)) / pow(math.tan(agl), 2));
    b = ((2 * dx * px) + (2 * dy * py)) - ((2 * dz * pz) / pow(math.tan(agl), 2));
    c = (pow(dx, 2) + pow(dy, 2) - pow(dz, 2)) / pow(math.tan(agl), 2);
    delta(a, b, c)

def main():
    if sys.argv[1] == '1':
        print("Sphere of radius", sys.argv[8])
        print("Line passing through the point (", sys.argv[2], ", ", sys.argv[3], ", ", sys.argv[4], ") ", "and parallel to the vector (",  sys.argv[5], ", ", sys.argv[6], ", ", sys.argv[7], ")", sep="")
        sphere()
    if sys.argv[1] == '2':
        print("Cylinder of radius", sys.argv[8])
        print("Line passing through the point (", sys.argv[2], ", ", sys.argv[3], ", ", sys.argv[4], ") ", "and parallel to the vector (",  sys.argv[5], ", ", sys.argv[6], ", ", sys.argv[7], ")", sep="")
        cylindre()
    if sys.argv[1] == '3':
        print("Cone with a", sys.argv[8], "degree agl")
        print("Line passing through the point (", sys.argv[2], ", ", sys.argv[3], ", ", sys.argv[4], ") ", "and parallel to the vector (",  sys.argv[5], ", ", sys.argv[6], ", ", sys.argv[7], ")", sep="")
        cone()

if __name__ == '__main__':
    main()